import React, { useState, useEffect, useRef } from 'react';

export default function InfiniteFilterBody({ pageSize, params }) {
  const [options, setOptions] = useState([]);
  const [page, setPage]     = useState(0);
  const [hasMore, setHasMore] = useState(true);
  const containerRef = useRef<HTMLDivElement>(null);
  const sentinelRef  = useRef<HTMLDivElement>(null);

  useEffect(() => {
    fetch(`/api/${params.column.getColId()}/values?page=${page}&size=${pageSize}`)
      .then(r => r.json())
      .then(({ values, total }) => {
        setOptions(o => [...o, ...values]);
        if ((page + 1) * pageSize >= total) setHasMore(false);
      });
  }, [page]);

  // Observe sentinel
  useEffect(() => {
    if (!sentinelRef.current || !hasMore) return;
    const obs = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setPage(p => p + 1);
        }
      },
      { root: containerRef.current, threshold: 1 }
    );
    obs.observe(sentinelRef.current);
    return () => obs.disconnect();
  }, [hasMore]);

  // hook up selections exactly as before...
  // props.params.filterChangedCallback(), etc.

  return (
    <div
      ref={containerRef}
      style={{ height: 200, overflowY: 'auto', padding: 4 }}
    >
      {options.map(opt => (
        <label key={opt}>
          <input
            type="checkbox"
            /* checked/onclickâ€¦ */
          />{' '}
          {opt}
        </label>
      ))}
      {hasMore && <div ref={sentinelRef} style={{ height: '1px' }} />}
    </div>
  );
}
