-- 1. Base data: all facilities meeting filters (but not filtered by negotiation date)
WITH base_data_all AS (
  SELECT
    fe.system_id::text AS system_id,
    fe.facility_entity_id,
    fe.name,
    fe.system,
    fe.spending_category,
    fe.co_id,
    fe.next_negotiation_date::DATE AS next_negotiation_date,
    fe.tf_market_groups,
    CASE 
      WHEN EXISTS (
        SELECT 1 FROM amp_renewal_facilities arf
        WHERE arf.facility_entity_id = fe.facility_entity_id
      ) THEN 0 
      ELSE 1 
    END AS no_renewal
  FROM facility_entity fe
  WHERE 
    -- Apply your filters (except the negotiation date filter):
    fe.spending_category = ANY(ARRAY['CategoryA','CategoryB'])
    AND fe.co_id = ANY(ARRAY['123','456'])
    AND EXISTS (
      SELECT 1 FROM jsonb_array_elements(fe.tf_market_groups) grp
      WHERE grp->>'code' = ANY(ARRAY['MKT1','MKT2'])
    )
),

-- 2. Base counts: total facilities & facilities without renewal per system,
--    computed on all facilities from base_data_all.
base_grouped AS (
  SELECT
    system_id,
    COUNT(*) AS total_facilities,
    SUM(no_renewal) AS facilities_without_renewal
  FROM base_data_all
  GROUP BY system_id
),

-- 3. Display data: only facilities with an upcoming negotiation date.
display_data AS (
  SELECT *
  FROM base_data_all
  WHERE next_negotiation_date >= CURRENT_DATE
),

-- 4. For system_id = '1': return individual facilities.
individual_facilities AS (
  SELECT
    facility_entity_id::text AS id,
    system_id,
    name,
    system,
    spending_category,
    next_negotiation_date,
    tf_market_groups
  FROM display_data
  WHERE system_id = '1'
),

-- 5. For systems other than '1': group the filtered (display) facilities.
grouped_facilities AS (
  SELECT
    system_id AS id,
    system_id,
    (system->>'systemname') AS name,
    system,
    spending_category,
    MIN(next_negotiation_date) AS next_negotiation_date,
    (
      SELECT jsonb_agg(DISTINCT grp)
      FROM display_data dd2, jsonb_array_elements(dd2.tf_market_groups) AS grp
      WHERE dd2.system_id = dd.system_id
    ) AS tf_market_groups
  FROM display_data dd
  WHERE system_id != '1'
  GROUP BY system_id, system, spending_category
),

-- 6. Combine the individual and grouped display results.
combined AS (
  SELECT * FROM individual_facilities
  UNION ALL
  SELECT * FROM grouped_facilities
)

SELECT
  c.id,
  c.system_id,
  c.name,
  c.system,
  c.spending_category,
  c.next_negotiation_date,
  c.tf_market_groups,
  bg.total_facilities,
  bg.facilities_without_renewal,
  COUNT(*) OVER() AS total_count
FROM combined c
LEFT JOIN base_grouped bg ON c.system_id = bg.system_id
ORDER BY c.next_negotiation_date ASC
LIMIT 10 OFFSET 0;
