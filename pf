// InfiniteFilterBody.tsx
import React, { useState, useEffect, useRef } from 'react';
import { ISetFilterParams } from 'ag-grid-community';

type ApiResponse = { values: string[]; total: number };

const InfiniteFilterBody: React.FC<ISetFilterParams> = (props) => {
  const { api, column, filterChangedCallback, filterParams, filterModel } = props;
  const pageSize = filterParams.pageSize ?? 50;
  const colId    = column.getColId();

  // → our paged-in values
  const [options, setOptions]     = useState<string[]>([]);
  const [offset, setOffset]       = useState(0);
  const [totalCount, setTotalCount] = useState<number>(Infinity);

  const containerRef = useRef<HTMLDivElement>(null);
  const sentinelRef  = useRef<HTMLDivElement>(null);

  // 1) page in values
  useEffect(() => {
    fetch(`/api/${colId}/values?limit=${pageSize}&offset=${offset}`)
      .then(r => r.json() as Promise<ApiResponse>)
      .then(({ values, total }) => {
        setOptions(prev => {
          // dedupe in case the API returns some overlap
          const merged = [...prev, ...values];
          return Array.from(new Set(merged));
        });
        setTotalCount(total);
      });
  }, [colId, pageSize, offset]);

  // 2) bump offset when sentinel scrolls into view
  useEffect(() => {
    const node = sentinelRef.current;
    if (!node || options.length >= totalCount) return;
    const obs = new IntersectionObserver(
      ([e]) => e.isIntersecting && setOffset(o => o + pageSize),
      { root: containerRef.current, threshold: 1 }
    );
    obs.observe(node);
    return () => obs.disconnect();
  }, [options.length, totalCount, pageSize]);

  // 3) compute “all selected” vs. explicit
  const modelValues    = filterModel?.values ?? null;   // null means “all”
  const isAllSelected  = modelValues === null;
  const isValueSelected = (v: string) =>
    modelValues === null || modelValues.includes(v);

  // 4a) Select All / Deselect All handler
  const onToggleSelectAll = () => {
    if (!isAllSelected) {
      // Fetch the **entire** list once, then setModel to that full array
      fetch(`/api/${colId}/values?limit=${totalCount}&offset=0`)
        .then(r => r.json() as Promise<ApiResponse>)
        .then(({ values: allValues }) => {
          setOptions(allValues); // now our options = full list
          api.getFilterInstance(colId, inst => {
            inst.setModel({ values: allValues });
            api.onFilterChanged();
          });
          filterChangedCallback();
        });
    } else {
      // Deselect everything
      api.getFilterInstance(colId, inst => {
        inst.setModel({ values: [] });
        api.onFilterChanged();
      });
      filterChangedCallback();
    }
  };

  // 4b) Toggle a single value
  const onToggleOne = (val: string) => {
    api.getFilterInstance(colId, inst => {
      const newValues = isAllSelected
        // “all” → remove this one from the **loaded** list
        ? options.filter(v => v !== val)
        // explicit list → add/remove it
        : modelValues!.includes(val)
          ? modelValues!.filter(v => v !== val)
          : [...modelValues!, val];

      inst.setModel({ values: newValues });
      api.onFilterChanged();
    });
    filterChangedCallback();
  };

  return (
    <div
      ref={containerRef}
      style={{ height: 200, overflowY: 'auto', padding: 8 }}
    >
      {/* Select / Deselect All */}
      <div style={{ marginBottom: 8 }}>
        <label>
          <input
            type="checkbox"
            checked={isAllSelected}
            onChange={onToggleSelectAll}
          />{' '}
          {isAllSelected ? 'Deselect All Values' : 'Select All Values'}
        </label>
      </div>

      {/* Individual options */}
      {options.map(v => (
        <label key={v} style={{ display: 'block', marginBottom: 4 }}>
          <input
            type="checkbox"
            checked={isValueSelected(v)}
            onChange={() => onToggleOne(v)}
          />{' '}
          {v}
        </label>
      ))}

      {/* scroll‐sentinel for paging */}
      {options.length < totalCount && (
        <div ref={sentinelRef} style={{ height: 1 }} />
      )}
    </div>
  );
};

export default InfiniteFilterBody;
